from typing import Dict, Any

from pathlib import Path
import json
from copy import copy

from haystack.preview.pipeline import Pipeline
from haystack.preview.document_stores.decorator import document_store
from canals.pipeline.save_load import (
    marshal_pipelines as marshal_canals_pipelines,
    _unmarshal_pipelines as _unmarshal_canals_pipelines,
    _unmarshal_components as _unmarshal_canals_components,
)


def _json_writer(data: Dict[str, Any], stream):
    return json.dump(data, stream, indent=4)


def save_pipelines(pipelines: Dict[str, Pipeline], path: Path, writer=_json_writer) -> None:
    """
    Converts a dictionary of named Pipelines into a JSON file.

    Args:
        pipelines: dictionary of {name: pipeline_object}
        path: where to write the resulting file
        writer: which function to use to write the dictionary to a file.
            Use this parameter to dump to a different format like YAML, TOML, HCL, etc.

    Returns:
        None
    """
    data = marshal_pipelines(pipelines=pipelines)
    with open(path, "w", encoding="utf-8") as file:
        writer(data, file)


def load_pipelines(path: Path, reader=json.load) -> Dict[str, Pipeline]:
    """
    Loads the content of a JSON file generated by `save_pipelines()` into
    a dictionary of named Pipelines.

    Args:
        path: where to read the file from
        reader: which function to use to read the dictionary to a file.
            Use this parameter to load from a different format like YAML, TOML, HCL, etc.

    Returns:
        The pipelines as a dictionary of `{"pipeline-name": <pipeline object>}`
    """
    with open(path, "r", encoding="utf-8") as handle:
        data = reader(handle)
    return unmarshal_pipelines(data)


def marshal_pipelines(pipelines: Dict[str, Pipeline]) -> Dict[str, Any]:
    """
    Converts a dictionary of named Pipelines into a Python dictionary that can be
    written to a JSON file.

    In case there are different component instances, meaning components with a different
    hash, and an identical name they are suffixed with an underscore and an incrementing number.
    This way we can be sure that there is no confusion when loading back the Pipelines from file.
    Obviously names will be different when unmarshaling but Pipelines' behaviour won't change.

    Args:
        pipelines: A dictionary of `{"pipeline-name": <pipeline object>}`

    Returns:
        A Python dictionary representing the Pipelines objects above, that can be written to JSON and can be reused to
        recreate the original Pipelines.
    """
    marshalled_pipelines = marshal_canals_pipelines(pipelines)

    marshalled_stores = {}
    for pipeline_name, pipeline in pipelines.items():
        store_connections = copy(pipelines[pipeline_name]._document_stores_connections)
        for store_name, store in pipeline._document_stores.items():
            marshalled_store = store.to_dict()

            if any(marshalled_store["hash"] == s["hash"] for s in marshalled_stores.values()):
                # This store is already present, we'll reuse it
                continue
            del marshalled_store["hash"]

            # Avoiding name collisions across different stores with the same name
            unique_store_name = store_name
            i = 0
            while unique_store_name in marshalled_stores:
                unique_store_name = store_name + "_" + str(i)
                i += 1

            # Rename the connections if necessary
            if unique_store_name != store_name:
                for connection_name, connection in store_connections.items():
                    if connection == store_name:
                        store_connections[connection_name] = unique_store_name

            marshalled_stores[unique_store_name] = marshalled_store
        marshalled_pipelines["pipelines"][pipeline_name]["store_connections"] = store_connections
    marshalled_pipelines["stores"] = marshalled_stores
    return marshalled_pipelines


def unmarshal_pipelines(data: Dict[str, Any]) -> Dict[str, Pipeline]:
    """
    Loads the content of a dictionary generated by `marshal_pipelines()` into
    a dictionary of named Pipelines.

    Args:
        data: pipelines' data, as generated by `marshal_pipelines()`.

    Returns:
        The pipelines as a dictionary of `{"pipeline-name": <pipeline object>}`.
    """
    # Unmarshal stores
    stores = {}
    for store_name, store in data["stores"].items():
        cls = document_store.registry[store["type"]]
        stores[store_name] = cls.from_dict(store)

    components = _unmarshal_canals_components(data)
    for pipeline in data["pipelines"].values():
        # Reconnect stores
        store_connections = pipeline["store_connections"]
        for component_name, store_name in store_connections.items():
            components[component_name].document_store = stores[store_name]

    return _unmarshal_canals_pipelines(data, components)
